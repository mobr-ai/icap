@prefix iconto: <http://www.mobr.ai/ontologies/iconto#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix ns: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix vann: <http://purl.org/vocab/vann/> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@base <http://www.mobr.ai/ontologies/iconto#> .

<http://www.mobr.ai/ontologies/iconto#> a owl:Ontology ;
	owl:versionIRI <http://www.mobr.ai/ontologies/iconto/v0/> ;
	owl:imports <http://www.w3.org/2003/06/sw-vocab-status/ns> ;
	dc:contributor "Marcio Moreno" , "Rafael Brandao" ;
	dc:creator "MOBR Systems" ;
	dc:title "ICOnto - An ontology for the Internet Computer ecosystem" ;
	vann:preferredNamespacePrefix "iconto" ;
	rdfs:comment "This ontology specification uses W3C RDF Schema and the Web Ontology Language. Its main source of information comes from IC official documentation."@en ;
	rdfs:seeAlso <https://github.com/mobr-ai/ICOnto> , <https://internetcomputer.org> ;
	owl:versionInfo "0.0.3" ;
	ns:term_status "unstable" ;
    dc:license <https://www.apache.org/licenses/LICENSE-2.0> .

<https://www.apache.org/licenses/LICENSE-2.0>
    rdf:type dcterms:LicenseDocument ;
    skos:prefLabel "Apache License v2" ;
    dc:title "Apache License, Version 2.0" .


iconto:Account a owl:Class ;
    skos:prefLabel "Account" ;
    skos:altLabel "Address" ;
    rdfs:comment "A set of entries in the ledger canister." ;
    rdfs:subClassOf owl:Thing .


iconto:Actor a owl:Class ;
    skos:prefLabel "Actor" ;
    rdfs:comment "An actor is a primitive in the actor model. It is a process with encapsulated state that communicates with other concurrently running actors through asynchronous messages that are received sequentially. The actor model is relevant to the ICP because canisters on ICP (a type of smart contract) follow the actor model for concurrent and asynchronous computation." ;
    rdfs:subClassOf owl:Thing .


iconto:Balance a owl:Class ;
    skos:prefLabel "Balance" ;
    skos:altLabel "Account Balance" ;
    rdfs:comment "The balance of an account on the ledger is the sum of all deposits minus the sum of all withdrawals. As a degenerate case, it is sometimes useful to say that an account which is not present in the ledger has a balance of zero. The balance of a ledger account is denominated in ICP and is represented with eight decimals. Thus, the minimum positive balance of an account is 0.00000001 or 10^-8 ICP; this amount is sometimes referred to as one e8." ;
    rdfs:subClassOf owl:Thing .


iconto:Batch a owl:Class ;
    skos:prefLabel "Batch" ;
    rdfs:comment "A batch is a collection of messages whose order is agreed upon by consensus." ;
    rdfs:subClassOf owl:Thing .


iconto:Beneficiary a owl:Class ;
    skos:prefLabel "Beneficiary" ;
    rdfs:comment "The principal who owns the balance of the account. The beneficiary of an account cannot be changed. The beneficiary of an account may or may not be allowed to make transactions on the account (see fiduciary)." ;
    rdfs:subClassOf iconto:Principal .


iconto:Blockchain a owl:Class ;
    skos:prefLabel "Blockchain" ;
    rdfs:comment "A growing list of cryptographically linked blocks, agreed upon by consensus. On the Internet Computer, every subnet maintains its own blockchain with blocks containing messages for the canisters hosted on this subnet. These blockchains interact using chain key cryptography." ;
    rdfs:subClassOf owl:Thing .


iconto:BoundaryNode a owl:Class ;
    skos:prefLabel "Boundary Node" ;
    rdfs:comment "Gateways to the Internet Computer. These nodes allow users to seamlessly access the canisters smart contracts running on ICP. The boundary nodes have several purposes: they aid in discover-ability (the icp0.io domain name points to a set of boundary nodes), they are geo-aware and can route incoming requests to the nearest subnet node that hosts the canister involved, they can help load balance query transactions, they can cache cryptographically verified data in the role of a content distribution network, they can throttle excessive interactions from an outside IP address, and they can help protect subnets from DDoS attacks." ;
    rdfs:subClassOf owl:Thing .


iconto:BurningTransaction a owl:Class ;
    skos:prefLabel "Burning Transaction" ;
    rdfs:comment "A burning transaction is the process of 'burning' ICP, whereby a certain amount of ICP are destroyed. The main use case is that of purchasing cycles, through which ICP are destroyed while at the same time a corresponding amount of cycles is created, using the current exchange rate between ICP and (XDR), in such a way that one XDR corresponds to one trillion (10E12) cycles. It is represented as a transaction from the source account to the ICP supply account." ;
    rdfs:subClassOf iconto:Transaction .


iconto:Candid a owl:Class ;
    skos:prefLabel "Candid" ;
    rdfs:comment "An IDL (Interface Description Language) crafted specifically for the Internet Computer, providing a common language for application interfaces to facilitate communication between services that are written in different programming languages." ;
    rdfs:subClassOf owl:Thing .


iconto:Canister a owl:Class ;
    skos:prefLabel "Canister" ;
    rdfs:comment "A type of smart contract that bundles code and state. A canister can be deployed as a smart contract on the Internet Computer and accessed over the Internet." ;
    rdfs:subClassOf iconto:SmartContract .


iconto:CanisterAccount a owl:Class ;
    skos:prefLabel "Canister Account" ;
    rdfs:comment "A ledger account owned by a canister (i.e. whose fiduciary is a canister). A non-canister account is a ledger account whose fiduciary is a non-canister principal." ;
    rdfs:subClassOf iconto:Account .


iconto:CDK a owl:Class ;
    skos:prefLabel "CDK" ;
    skos:altLabel "Canister Development Kit" ;
    rdfs:comment "An adapter used by the IC SDK that provides a programming language with the features necessary to create and manage canisters. The IC SDK comes with a few CDKs already installed for you so you can use them in the language of your choice." ;
    rdfs:subClassOf owl:Thing .


iconto:CanisterSignature a owl:Class ;
    skos:prefLabel "Canister Signature" ;
    rdfs:comment "A canister signature uses a signature scheme based on certified variables. Public “keys” include a canister id plus a seed (so that every canister has many public keys); signatures are certificates that prove that the canister has put the signed message at a specific place in its state tree. Details can be found in the Internet Computer interface specification." ;
    rdfs:subClassOf owl:Thing .


iconto:CanisterState a owl:Class ;
    skos:prefLabel "Canister State" ;
    rdfs:comment "The entire state of a canister at a given point in time. A canister’s state is divided into user state and system state. The user state is a WebAssembly module instance and the system state is the auxiliary state maintained by the Internet Computer on behalf of the canister, such as its compute allocation, balance of cycles, input and output queues, and other metadata. A canister interacts with its own system state either implicitly, such as when consuming cycles, or through the System API, such as when sending messages." ;
    rdfs:subClassOf owl:Thing .


iconto:CUP a owl:Class ;
    skos:prefLabel "CUP" ;
    skos:altLabel "Catch-up Package" ;
    rdfs:comment "A catch-up package is a data bundle that contains everything needed to bootstrap a subnet replica." ;
    rdfs:subClassOf owl:Thing .


iconto:CertifiedQuery a owl:Class ;
    skos:prefLabel "Certified Query" ;
    rdfs:comment "A certified query is a query call for which the response is certified." ;
    rdfs:subClassOf owl:Thing .


iconto:CertifiedVariable a owl:Class ;
    skos:prefLabel "Certified Variable" ;
    rdfs:comment "A piece of data that a canister can store in its subnet's canonical state in the processing of an update call (or inter-canister call), so that during the handling of a query call, the canister can return a certificate to the user that proves that it really committed to that value." ;
    rdfs:subClassOf owl:Thing .


iconto:ChainKey a owl:Class ;
    skos:prefLabel "ChainKey" ;
    rdfs:comment "Chain key cryptography consists of a set of cryptographic protocols that orchestrate the nodes that make up the Internet Computer. The most visible innovation of chain key cryptography is that the Internet Computer has a single public key. This is a huge advantage as it allows any device, including smart watches and mobile phones, to verify the authenticity of artifacts from the Internet Computer." ;
    rdfs:subClassOf owl:Thing .


iconto:Consesus a owl:Class ;
    skos:prefLabel "Consesus" ;
    rdfs:comment "In distributed computing, consensus is a fault tolerant mechanism by means of which a number of nodes can reach agreement about a value or state. Consensus is a core component of the replica software. The consensus layer selects messages from the peer-to-peer artifact pool and pulls messages from the cross-network streams of other subnets and organizes them into a batch, which is delivered to the message routing layer." ;
    rdfs:subClassOf owl:Thing .


iconto:Controller a owl:Class ;
    skos:prefLabel "Controller" ;
    rdfs:comment "A controller of a canister is a person, organization, or other canister that has administrative rights over the canister. Controllers are identified by their principals. For example, a controller of a canister can upgrade the WebAssembly code of the canister or delete the canister." ;
    rdfs:subClassOf owl:Thing .


iconto:Cycle a owl:Class ;
    skos:prefLabel "Cycle" ;
    rdfs:comment "On the Internet Computer, a cycle is the unit of measurement for resources consumed in the form of processing, memory, storage, and network bandwidth. Every canister has a cycles account to which resources consumed by the canister are charged. The Internet Computer’s utility token (ICP) can be converted to cycles and transferred to a canister. Cycles can also be transferred between canisters by attaching them to an inter-canister message. ICP can always be converted to cycles using the current price of ICP measured in XDR using the convention that one trillion cycles correspond to one XDR." ;
    rdfs:subClassOf owl:Thing .


iconto:Dapp a owl:Class ;
    skos:prefLabel "Dapp" ;
    skos:altLabel "Decentralized Application" ;
    rdfs:comment "A software program that runs on a decentralised computer network instead of a single computer. On the Internet Computer dapps are composed of canister smart contracts." ;
    rdfs:subClassOf owl:Thing .


iconto:DataCenter a owl:Class ;
    skos:prefLabel "Data Center" ;
    skos:altLabel "DC" ;
    rdfs:comment "A data center (DC) is a physical site that hosts nodes which contribute to the Internet Computer. It includes the hardware and software infrastructure required for node deployment. Data centers are nodes that are selected and vetted by the NNS." ;
    rdfs:subClassOf owl:Thing .


iconto:DissolveDelay a owl:Class ;
    skos:prefLabel "Dissolve Delay" ;
    rdfs:comment "The dissolve delay is the amount of time that neurons must spend dissolving before becoming dissolved." ;
    rdfs:subClassOf owl:Thing .


iconto:DissolveState a owl:Class ;
    skos:prefLabel "Dissolve State" ;
    rdfs:comment "The neuron state characterized by a dissolve delay equal to zero. (It is conventionally said that a neuron in this state does not have a dissolve delay.) It is in this state that a neuron can be 'disbursed', hence its stake moved elsewhere, and its corresponding neuron account closed. The age of a dissolved neuron is considered to be zero." ;
    rdfs:subClassOf iconto:NeuronState .


iconto:DissolvingState a owl:Class ;
    skos:prefLabel "Dissolving State" ;
    rdfs:comment "The neuron state that follows immediately after its owner issues a 'start dissolving' command, and continues until a 'stop dissolving' command is issued, or until the dissolve delay timer runs out. The age of a dissolving neuron is considered to be zero." ;
    rdfs:subClassOf iconto:NeuronState .


iconto:ExecutionEnvironment a owl:Class ;
    skos:prefLabel "Execution Environment" ;
    rdfs:comment "The execution environment is one of the core layers of the replica software." ;
    rdfs:subClassOf owl:Thing .


iconto:Fiduciary a owl:Class ;
    skos:prefLabel "Fiduciary" ;
    rdfs:comment "The fiduciary of an account is the principal allowed to make transactions on the account; as such, it may be useful to think of it as the owner of the account, with the caveat that it may or may not be the beneficiary of the account. The neuron account is a prominent example of an account for which the beneficiary and fiduciary do not coincide (the fiduciary is the governance canister while the beneficiary is the neuron holder). The fiduciary of a (ledger) account does not change over time.";
    rdfs:subClassOf iconto:Principal .


iconto:GovernanceCanister a owl:Class ;
    skos:prefLabel "Governance Canister" ;
    rdfs:comment "A system canister that implements the NNS governance system, i.e., among others, stores and manages neurons and proposals, and implements the NNS voting environment.";
    rdfs:subClassOf iconto:SystemCanister .


iconto:ICP a owl:Class ;
    skos:prefLabel "ICP" ;
    skos:altLabel "Internet Computer Protocol" ;
    rdfs:comment "The Internet Computer Protocol (ICP) is a decentralized blockchain that provides scalable compute capacity for running canisters through independent node providers running nodes in geographically distributed data centers." ;
    rdfs:subClassOf owl:Thing .


iconto:ICPT a owl:Class ;
    skos:prefLabel "ICP token" ;
    skos:altLabel "Internet Computer Protocol token" ;
    rdfs:comment "The Internet Computer Protocol token (ticker 'ICP') is the utility token of the Internet Computer. ICP allows the broader internet community to participate in the governance of the Internet Computer blockchain network by locking ICP in neurons. ICP can also be converted into cycles, which are then used to power canisters." ;
    rdfs:subClassOf owl:Thing .


iconto:ICPSupplyAccount a owl:Class ;
    skos:prefLabel "ICP Supply Account" ;
    skos:altLabel "Supply Account" ;
    rdfs:comment "The ICP supply account is a quasi-fictitious ledger account whose balance is always zero. It has a central role in ICP burning and minting operations." ;
    rdfs:subClassOf iconto:Account .


iconto:Identity a owl:Class ;
    skos:prefLabel "Identity" ;
    rdfs:comment "Byte string that is used to identify an entity, such as a principal, that interacts with the Internet Computer. For users, the identity is the SHA-224 hash of the DER-encoded public key of the user." ;
    rdfs:subClassOf owl:Thing .


iconto:InternetIdentity a owl:Class ;
    skos:prefLabel "Internet Identity" ;
    rdfs:comment "Internet Identity is an anonymizing blockchain authentication system running on the Internet Computer" ;
    rdfs:subClassOf owl:Thing .


iconto:InductionPool a owl:Class ;
    skos:prefLabel "Induction Pool" ;
    rdfs:comment "The induction pool of a subnet blockchain is the collection of all input queues of all canisters residing on the subnet." ;
    rdfs:subClassOf owl:Thing .


iconto:IngressMessage a owl:Class ;
    skos:prefLabel "Ingress Message" ;
    rdfs:comment "An ingress message is a message sent by an end-user to a canister running on a subnet blockchain. The message is signed by the secret key corresponding to the end-user's identity and sent to one of the replicas that participate in the subnet." ;
    rdfs:subClassOf iconto:Message .


iconto:IngressMessageHistory a owl:Class ;
    skos:prefLabel "Ingress Message History" ;
    rdfs:comment "The ingress message history records the current status of every ingress message processed by a replica and keeps track of whether messages were successfully included in the induction pool and the responses of executed messages." ;
    rdfs:subClassOf owl:Thing .


iconto:InputQueue a owl:Class ;
    skos:prefLabel "Input Queue" ;
    rdfs:comment "The input queue of a canister contains all messages bound for the canister. When the canister is scheduled for execution, messages from its input queue will be executed." ;
    rdfs:subClassOf owl:Thing .


iconto:InterCanisterMessage a owl:Class ;
    skos:prefLabel "Inter-canister Message" ;
    rdfs:comment "An inter-canister message is a message sent from one canister to another. Inter-canister messages are different from user-initiated ingress messages." ;
    rdfs:subClassOf iconto:Message .


iconto:LedgerCanister a owl:Class ;
    skos:prefLabel "Ledger Canister" ;
    rdfs:comment "The ledger canister is a system canister whose main role is to store accounts and their corresponding transactions." ;
    rdfs:subClassOf iconto:SystemCanister .


iconto:Message a owl:Class ;
    skos:prefLabel "Message" ;
    rdfs:comment "A message is data sent from one canister to another or from a user to a canister." ;
    rdfs:subClassOf owl:Thing .


iconto:MessageRouting a owl:Class ;
    skos:prefLabel "Message Routing" ;
    rdfs:comment "The message routing layer receives batches from the consensus layer and inducts them into the induction pool. Message routing then schedules a set of canisters to execute messages from their input queues. After messages have been executed, the message routing layer takes any messages produced in the execution round from the output queues and puts those messages into the outgoing streams to be consumed by canisters on other subnets." ;
    rdfs:subClassOf owl:Thing .


iconto:MintingTransaction a owl:Class ;
    skos:prefLabel "Minting Transaction" ;
    rdfs:comment "A minting transaction is the process of 'minting' ICP, whereby a certain amount of ICP comes into existence. ICP is minted in order to reward neurons for voting, and reward node providers for participating in the ICP by providing compute capacity through the running of nodes. A minting transaction is represented as a transaction from the ICP supply account to a destination account." ;
    rdfs:subClassOf iconto:Transaction .


iconto:Motoko a owl:Class ;
    skos:prefLabel "Motoko" ;
    rdfs:comment "Motoko is a programming language designed to directly support the programming model of the Internet Computer, making it easier to efficiently build applications and take advantage of some of the more unusual features of ICP, including the actor model for smart contracts and compilation to WebAssembly." ;
    rdfs:subClassOf owl:Thing .


iconto:NonDissolvingState a owl:Class ;
    skos:prefLabel "Non-dissolving State" ;
    rdfs:comment "A neuron that is not dissolved or dissolving is said to be in a non-dissolving state (or 'aging'). Non-dissolving neurons thus accrue 'age', with the caveat that beginning to dissolve at any time reduces this age back to zero. The dissolve delay parameter of a non-dissolving (aka 'aging') neuron cannot be zero, because such a neuron would have to already be dissolved." ;
    rdfs:subClassOf owl:Thing .


iconto:NNS a owl:Class ;
    skos:prefLabel "NNS" ;
    skos:altLabel "Network Nervous System" ;
    rdfs:comment "The Network Nervous System (NNS) is the decentralized autonomous organization (DAO) that governs the Internet Computer by proposals on which ICP neuron owners can vote. Once such a proposal is accepted, it is autonomously executed. The NNS consists of a collection of system canisters (aka 'NNS canisters')." ;
    rdfs:subClassOf owl:Thing .


iconto:Neuron a owl:Class ;
    skos:prefLabel "Neuron" ;
    rdfs:comment "An ICP entity that can make proposals and vote on proposals related to the governance of the Internet Computer. To provide the stability required for responsible governance, neurons need to store ('stake') a certain amount of ICP in order to be able to make and vote on proposals. This locks the tokens for a period of time, after which it starts dissolving. The ICP stake of a neuron is stored in a neuron account. The neuron owner has the right to propose and vote on governance issues, and is granted rewards for voting in proportion to the amount of ICP staked, and the duration of the dissolve period." ;
    rdfs:subClassOf owl:Thing .


iconto:NeuronAccount a owl:Class ;
    skos:prefLabel "Neuron Account" ;
    rdfs:comment "A neuron account is a canister account whose beneficiary is a neuron (or the neuron's owner). The governance canister is the fiduciary of all neuron accounts." ;
    rdfs:subClassOf iconto:CanisterAccount .


iconto:NeuronAge a owl:Class ;
    skos:prefLabel "Neuron Age" ;
    rdfs:comment "The neuron age is a neuron parameter roughly indicative of the time that has passed since its creation or since when it last entered into a non-dissolving state. Calculation of a neuron’s age needs to take into account whether the neuron has spent time dissolving or dissolved, both of which reset this parameter." ;
    rdfs:subClassOf owl:Thing .


iconto:NeuronState a owl:Class ;
    skos:prefLabel "Neuron State" ;
    rdfs:comment "Current state of a neuron" ;
    rdfs:subClassOf owl:Thing .


iconto:Node a owl:Class ;
    skos:prefLabel "Node" ;
    rdfs:comment "A node is a physical hardware device run by independent [node providers]. It hosts all the hardware, replica software, and configuration settings required to participate in the Internet Computer." ;
    rdfs:subClassOf owl:Thing .


iconto:NodeOperator a owl:Class ;
    skos:prefLabel "Node Operator" ;
    rdfs:comment "A node operator (NO) is a non-canister principal who has the authority to add/remove nodes to/from the ICP, by delegation of the the corresponding node providers." ;
    rdfs:subClassOf iconto:Principal .


iconto:NodeProvider a owl:Class ;
    skos:prefLabel "Node Provider" ;
    rdfs:comment "A node provider (NP) is a non-canister principal that receives the rewards stemming from node participation to the ICP (aka “payout principal”). Usually, though not necessarily, a node provider is the owner of the node, and may also be involved in node operation and related tasks. A node provider may receive rewards from multiple nodes in multiple data centers. Node providers are selected and vetted by the NNS." ;
    rdfs:subClassOf iconto:Principal .


iconto:OutputQueue a owl:Class ;
    skos:prefLabel "Output Queue" ;
    rdfs:comment "Each canister has an output queue of messages bound for other canisters." ;
    rdfs:subClassOf owl:Thing .


iconto:P2P a owl:Class ;
    skos:prefLabel "P2P" ;
    skos:altLabel "Peer-to-Peer" ;
    rdfs:comment "In common usage, peer-to-peer (P2P) computing or networking is a distributed application architecture that partitions workload across a network of equally-privileged computer nodes so that participants can contribute resources such as processing power, disk storage, or network bandwidth to handle application workload. The peer-to-peer layer collects and disseminates messages and artifacts from users and from other nodes. The nodes of a subnet form a dedicated peer-to-peer broadcast network that facilitates the secure bounded-time/eventual delivery broadcast of artifacts (such as ingress messages, control messages and their signature shares). The consensus layer builds upon this functionality." ;
    rdfs:subClassOf owl:Thing .


iconto:Principal a owl:Class ;
    skos:prefLabel "Principal" ;
    skos:altLabel "Security Principal" ;
    rdfs:comment "A principal is an entity that can be authenticated by the Internet Computer." ;
    rdfs:subClassOf owl:Thing .


iconto:Proposal a owl:Class ;
    skos:prefLabel "Proposal" ;
    rdfs:comment "A proposal is a statement describing an action to modify certain parameters of the ICP, or of any of its subsystems. It is implemented as an ICP entity having various attributes, such as an ID, a URL, a summary etc. Proposals are submitted by eligible neuron owners for the consideration of ICP community, and undergo a voting process, following which they can be adopted or rejected. Adopted proposals are then executed autonomously. There are several taxonomies of proposals, the most prominent of which groups proposals into 'topics', whose adoption, in turn, triggers certain categories of actions, such as the creation of a subnet, the addition of nodes to a subnet, or the upgrade to a new replica software." ;
    rdfs:subClassOf owl:Thing .


iconto:ProtoNode a owl:Class ;
    skos:prefLabel "Proto-Node" ;
    rdfs:comment "A proto-node is an ICP entity consisting of a combination of hardware and software, that differs from a node in that it has not yet been registered with ICP. A proto-node is, in short, a 'node-in-waiting', hence has all that it takes to be a node except the replica software." ;
    rdfs:subClassOf owl:Thing .


iconto:Query a owl:Class ;
    skos:prefLabel "Query" ;
    rdfs:comment "A query is an optimised way to execute operations on a canister where the state changes are not preserved. Queries are synchronous and can be made to any node that hosts the canister. Queries do not require consensus to verify the result." ;
    rdfs:subClassOf owl:Thing .


iconto:Replica a owl:Class ;
    skos:prefLabel "Replica" ;
    rdfs:comment "The replica is a collection of protocol components that are necessary for a node to participate in a subnet." ;
    rdfs:subClassOf owl:Thing .


iconto:Registry a owl:Class ;
    skos:prefLabel "Registry" ;
    rdfs:comment "The ICP registry is a canister that manages the meta-data maintained on the network nervous system (NNS) and accessed by all subnet blockchains." ;
    rdfs:subClassOf iconto:Canister .


iconto:SmartContract a owl:Class ;
    skos:prefLabel "Smart Contract" ;
    rdfs:comment "A smart contract is a stateful computer program designed to automatically execute, control or document relevant events and actions according to the terms of a contract or an agreement. A smart contract can be deployed on the Internet Computer in the form of a canister bundling data and code. A canister can have one or more controllers that are permitted to modify the code of the canister, thereby modifying the terms of the smart contract. For a canister smart contract to have immutable code, its list of controllers must be empty." ;
    rdfs:subClassOf owl:Thing .


iconto:StateChange a owl:Class ;
    skos:prefLabel "State Change" ;
    rdfs:comment "A state change is the result of any transaction, function call, or operation that changes the information stored in a canister. For example, if a function makes an update call that adds two numbers together or removes a name from a list, the result is a change to the canister state." ;
    rdfs:subClassOf owl:Thing .


iconto:StateManager a owl:Class ;
    skos:prefLabel "State Manager" ;
    rdfs:comment "The state manager is responsible for: Maintaining (multiple versions of) the replicated state the deterministic state machine implemented by message routing and the execution environment operates on. Converting back and forth between the replicated state and its canonical version (latter can be understood independent of the concrete implementation). Obtaining certifications of parts of the canonical state, which allow other stakeholders such as other subnets and/or users, to verify that some piece of state indeed originates from a valid subnetwork. Providing capabilities to sync the canonical state with other replicas in the same subnet so that replicas that have fallen behind can catch up." ;
    rdfs:subClassOf owl:Thing .


iconto:Subnet a owl:Class ;
    skos:prefLabel "Subnet" ;
    rdfs:comment "A collection of nodes that run their own instance of the consensus algorithm to produce a subnet blockchain that interacts with other subnets of ICP using chain key cryptography." ;
    rdfs:subClassOf owl:Thing .


iconto:SystemCanister a owl:Class ;
    skos:prefLabel "System Canister" ;
    rdfs:comment "A system canister is a pre-installed canister that performs certain tasks needed to maintain the Internet Computer." ;
    rdfs:subClassOf iconto:Canister .


iconto:Transaction a owl:Class ;
    skos:prefLabel "Transaction" ;
    rdfs:comment "A ledger account transaction is the process of transferring ICP from one account to another." ;
    rdfs:subClassOf owl:Thing .


iconto:TransferTransaction a owl:Class ;
    skos:prefLabel "Transfer Transaction" ;
    rdfs:comment "A transfer transaction is the process of transferring ICP from any regular ledger account (i.e. any ledger account except the ICP supply account) to another regular ledger account." ;
    rdfs:subClassOf iconto:Transaction .


iconto:User a owl:Class ;
    skos:prefLabel "User" ;
    rdfs:comment "A user is any entity that interacts with the Internet Computer. Users include end-users that use dapps deployed on ICP, dapp developers, holders of ICP utility tokens, and neuron holders." ;
    rdfs:subClassOf owl:Thing .


iconto:ValidSetRule a owl:Class ;
    skos:prefLabel "Valid Set Rule" ;
    rdfs:comment "The valid set rule is the rule that determines a valid induction pool. Ingress messages and inter-canister messages must pass certain checks to ensure that the valid set rule is upheld before they can be added to the induction pool." ;
    rdfs:subClassOf owl:Thing .


iconto:Vote a owl:Class ;
    skos:prefLabel "Vote" ;
    rdfs:comment "Vote is how proposals are selected for adoption and implementation. Its direct participants are the neurons, who both: Submit proposals. Vote on proposals. The voting process is a rather intricate undertaking, involving aspects such as neuron eligibility, voting power, chains of neuron followees etc. This has been designed with security and dependability in mind, and is being continuously improved in order to prevent the concentration of voting power in the hands of just a few neuron owners." ;
    rdfs:subClassOf owl:Thing .


iconto:WebAssembly a owl:Class ;
    skos:prefLabel "WebAssembly" ;
    skos:altLabel "Wasm" ;
    rdfs:comment "WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine." ;
    rdfs:subClassOf owl:Thing .


iconto:XDR a owl:Class ;
    skos:prefLabel "XDR" ;
    rdfs:comment "XDR is the currency code for special drawing rights (SDR). SDRs are supplementary foreign exchange assets that are defined and maintained by the International Monetary Fund (IMF). SDRs are not a currency themselves, but represent a claim to a currency that is held by IMF member countries in which they may be exchanged. The ICP developer docs refer to currencies based on their currency codes, therefore SDRs are referenced as its currency code XDR in this documentation." ;
    rdfs:subClassOf owl:Thing .


iconto:registeredIn a owl:ObjectProperty ;
    rdfs:domain iconto:Account ; 
    rdfs:range iconto:Canister .

iconto:hasAccountOwner a owl:ObjectProperty ;
    rdfs:domain iconto:Account ; 
    rdfs:range iconto:Beneficiary .

iconto:hasAccountFiduciary a owl:ObjectProperty ;
    rdfs:domain iconto:Account ; 
    rdfs:range iconto:Fiduciary .

iconto:hasAccountBalance a owl:ObjectProperty ;
    rdfs:domain iconto:Account ;
    rdfs:range iconto:Balance .


iconto:hasCanisterId a owl:DatatypeProperty ;
    rdfs:domain iconto:Canister ;
    rdfs:range xsd:string .

iconto:hasCanisterController a owl:DatatypeProperty ;
    rdfs:domain iconto:Canister ;
    rdfs:range xsd:string .

iconto:hasHostedSubnetId a owl:DatatypeProperty ;
    rdfs:domain iconto:Canister ;
    rdfs:range xsd:string .

iconto:hasOutputQueue a owl:ObjectProperty ;
    rdfs:domain iconto:Canister ;
    rdfs:range iconto:OutputQueue .


iconto:hasInputQueue a owl:ObjectProperty ;
    rdfs:domain iconto:InductionPool ;
    rdfs:range iconto:InputQueue .


iconto:ingressMessageProcessedBy a owl:ObjectProperty ;
    rdfs:domain iconto:IngressMessage ;
    rdfs:range iconto:Replica .


iconto:hasMessageHistoryRecord a owl:ObjectProperty ;
    rdfs:domain iconto:IngressMessageHistory ;
    rdfs:range iconto:IngressMessage .


iconto:hasInputQueueMessage a owl:ObjectProperty ;
    rdfs:domain iconto:InputQueue ;
    rdfs:range iconto:Message .

iconto:hasInputQueueCanister a owl:ObjectProperty ;
    rdfs:domain iconto:InputQueue ;
    rdfs:range iconto:Canister .


iconto:messageFrom a owl:ObjectProperty ;
    rdfs:domain iconto:Message ;
    rdfs:range iconto:Canister ;
    rdfs:range iconto:User .

iconto:messageTo a owl:ObjectProperty ;
    rdfs:domain iconto:Message ;
    rdfs:range iconto:Canister .

iconto:messageOrder a owl:DatatypeProperty ;
    rdfs:domain iconto:Message ;
    rdfs:range xsd:integer .


iconto:hasDissolveDelay a owl:ObjectProperty ;
    rdfs:domain iconto:Neuron ;
    rdfs:range iconto:DissolveDelay .

iconto:hasNeuronAge a owl:DatatypeProperty ;
    rdfs:domain iconto:Neuron ;
    rdfs:range xsd:decimal .

iconto:hasNeuronTimestamp a owl:DatatypeProperty ;
    rdfs:domain iconto:Neuron ;
    rdfs:range xsd:dateTimeStamp .

iconto:hasNeuronState a owl:ObjectProperty ;
    rdfs:domain iconto:Neuron ;
    rdfs:range iconto:NeuronState .

iconto:hasVotingPower a owl:DatatypeProperty ;
    rdfs:domain iconto:Neuron ;
    rdfs:range xsd:integer .

iconto:hasNeuronId a owl:DatatypeProperty ;
    rdfs:domain iconto:Neuron ;
    rdfs:range xsd:string .

iconto:hasNeuronStakeAmount a owl:DatatypeProperty ;
    rdfs:domain iconto:Neuron ;
    rdfs:range xsd:decimal .

iconto:hasNodeReplica a owl:ObjectProperty ;
    rdfs:domain iconto:Node ;
    rdfs:range iconto:Replica .


iconto:hasPrincipalIdentity a owl:ObjectProperty ;
    rdfs:domain iconto:Principal ;
    rdfs:range iconto:Identity .


iconto:hasSubnetId a owl:DatatypeProperty ;
    rdfs:domain iconto:Subnet ;
    rdfs:range xsd:string .

iconto:hasSubnetType a owl:DatatypeProperty ;
    rdfs:domain iconto:Subnet ;
    rdfs:range xsd:string .

iconto:hasSubnetNode a owl:ObjectProperty ;
    rdfs:domain iconto:Subnet ;
    rdfs:range iconto:Node .

iconto:hasSubnetInductionPool a owl:ObjectProperty ;
    rdfs:domain iconto:Subnet ;
    rdfs:range iconto:InductionPool .


iconto:hasTransactionHash a owl:DatatypeProperty ;
    rdfs:domain iconto:Transaction ;
    rdfs:range xsd:string .

iconto:hasTransactionAmount a owl:DatatypeProperty ;
    rdfs:domain iconto:Transaction ;
    rdfs:range xsd:decimal .

iconto:hasTransactionFee a owl:DatatypeProperty ;
    rdfs:domain iconto:Transaction ;
    rdfs:range xsd:decimal .

iconto:hasTransactionType a owl:DatatypeProperty ;
    rdfs:domain iconto:Transaction ;
    rdfs:range xsd:string .

iconto:hasTransactionStatus a owl:DatatypeProperty ;
    rdfs:domain iconto:Transaction ;
    rdfs:range xsd:string .

iconto:hasTransactionTimestamp a owl:DatatypeProperty ;
    rdfs:domain iconto:Transaction ;
    rdfs:range xsd:dateTimeStamp .

iconto:hasTransactionFrom a owl:DatatypeProperty ;
    rdfs:domain iconto:Transaction ;
    rdfs:range xsd:string .

iconto:hasTransactionTo a owl:DatatypeProperty ;
    rdfs:domain iconto:Transaction ;
    rdfs:range xsd:string .


iconto:hasProposalId a owl:DatatypeProperty ;
    rdfs:domain iconto:Proposal ;
    rdfs:range xsd:string .

iconto:hasProposalTitle a owl:DatatypeProperty ;
    rdfs:domain iconto:Proposal ;
    rdfs:range xsd:string .

iconto:hasProposalTopic a owl:DatatypeProperty ;
    rdfs:domain iconto:Proposal ;
    rdfs:range xsd:string .

iconto:hasProposalStatus a owl:DatatypeProperty ;
    rdfs:domain iconto:Proposal ;
    rdfs:range xsd:string .

iconto:hasProposalTimestamp a owl:DatatypeProperty ;
    rdfs:domain iconto:Proposal ;
    rdfs:range xsd:dateTimeStamp .

iconto:hasProposalVote a owl:ObjectProperty ;
    rdfs:domain iconto:Proposal ;
    rdfs:range iconto:Vote .

iconto:hasProponent a owl:ObjectProperty ;
    rdfs:domain iconto:Proposal ;
    rdfs:range iconto:Neuron .

iconto:hasVoter a owl:ObjectProperty ;
    rdfs:domain iconto:Vote ;
    rdfs:range iconto:Neuron .

iconto:hasVoteDecision a owl:DatatypeProperty ;
    rdfs:domain iconto:Vote ;
    rdfs:range xsd:string .
